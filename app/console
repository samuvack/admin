#!/usr/bin/env php
<?php

set_time_limit(0);

$app = require_once __DIR__.'/app.php';
$em = $app['orm.em'];

$helperSet = new \Symfony\Component\Console\Helper\HelperSet(array(
    'em' => new \Doctrine\ORM\Tools\Console\Helper\EntityManagerHelper($em)
));

$cli = $app['console'];
$cli->setHelperSet($helperSet);
$cli->addCommands(array(
    // Based on the commands of Doctrine\ORM\Tools\Console\ConsoleRunner::addCommands

    // DBAL Commands
    new \Doctrine\DBAL\Tools\Console\Command\RunSqlCommand(),
    new \Doctrine\DBAL\Tools\Console\Command\ImportCommand(),

    // ORM Commands
    new \Doctrine\ORM\Tools\Console\Command\ClearCache\MetadataCommand(),
    new \Doctrine\ORM\Tools\Console\Command\ClearCache\ResultCommand(),
    new \Doctrine\ORM\Tools\Console\Command\ClearCache\QueryCommand(),
    new \Doctrine\ORM\Tools\Console\Command\SchemaTool\CreateCommand(),
    new \Doctrine\ORM\Tools\Console\Command\SchemaTool\UpdateCommand(),
    new \Doctrine\ORM\Tools\Console\Command\SchemaTool\DropCommand(),
    new \Doctrine\ORM\Tools\Console\Command\EnsureProductionSettingsCommand(),
    new \Doctrine\ORM\Tools\Console\Command\ConvertDoctrine1SchemaCommand(),
    new \Doctrine\ORM\Tools\Console\Command\GenerateRepositoriesCommand(),
    new \Doctrine\ORM\Tools\Console\Command\GenerateEntitiesCommand(),
    new \Doctrine\ORM\Tools\Console\Command\GenerateProxiesCommand(),
    new \Doctrine\ORM\Tools\Console\Command\ConvertMappingCommand(),
    new \Doctrine\ORM\Tools\Console\Command\RunDqlCommand(),
    new \Doctrine\ORM\Tools\Console\Command\ValidateSchemaCommand(),
    new \Doctrine\ORM\Tools\Console\Command\InfoCommand(),
    new \Doctrine\ORM\Tools\Console\Command\MappingDescribeCommand(),
));

$phinxCommands= array(
    new \Phinx\Console\Command\Init(),
    new \Phinx\Console\Command\Create(),
    new \Phinx\Console\Command\Migrate(),
    new \Phinx\Console\Command\Rollback(),
    new \Phinx\Console\Command\Status(),
    new \Phinx\Console\Command\Test()
);

foreach($phinxCommands as $command) {
    // Prefix commands for clarity and to avoid collisions
    $command->setName("migrate:".$command->getName());
}

$cli->addCommands($phinxCommands);

$cli->run();

